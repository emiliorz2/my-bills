
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SourceType {
  message
  image
}

enum ExpenseType {
  simple
  invoice
}

enum Currency {
  CRC
  USD
}

enum ExpenseCategory {
  FOOD
  TRANSPORT
  MEDICAL
  SERVICES
  SUBSCRIPTIONS
  INSTALLMENTS
  ENTERTAINMENT
  HOUSEHOLD
  EDUCATION
  OTHER
}

// This schema defines the data model for a simple expense tracking application.

model Source {
  id             Int       @id @default(autoincrement())
  type           SourceType
  description    String?   @db.VarChar(255)
  receivedAt     DateTime
  fileUrl        String?   @db.VarChar(512)

  expenses       Expense[]
}

model Expense {
  id             Int               @id @default(autoincrement())
  sourceId       Int
  userId         Int
  vendor         String?           @db.VarChar(100)
  description    String            @db.VarChar(255)
  date           DateTime
  total          Float
  currency       Currency
  expenseType    ExpenseType
  category       ExpenseCategory?  
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  source         Source            @relation(fields: [sourceId], references: [id])
  user           User              @relation(fields: [userId], references: [id])
  invoiceDetails InvoiceDetail[]
}


model InvoiceDetail {
  id             Int       @id @default(autoincrement())
  expenseId      Int
  product        String    @db.VarChar(100)
  quantity       Int
  unitPrice      Float

  expense        Expense   @relation(fields: [expenseId], references: [id])
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  expenses  Expense[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  oauth_token_secret String?   @db.Text
  oauth_token        String?   @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

